<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sommaire on Cours Python</title>
    <link>https://cordier-info.github.io/</link>
    <description>Recent content in Sommaire on Cours Python</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language><atom:link href="https://cordier-info.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Bases</title>
      <link>https://cordier-info.github.io/cours_python/cours1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours1/</guid>
      <description>Introduction Python est un langage de programmation interprété développé par Guido van Rossum en 1989. Langage impératif de haut-niveau doté d&amp;rsquo;une syntaxe simple, Python s&amp;rsquo;adapte à de nombreux contextes grâce à sa modularité ; une importante librairie de modules et packages permet en effet d&amp;rsquo;étendre ses capacités.
  Shell et IDE Python possède son propre shell (interface en ligne de commande) : l&amp;rsquo;utilisateur entre une commande Python qui est interprétée immédiatement lorsque Entrée est tapée.</description>
    </item>
    
    <item>
      <title>TP2 : Bases et Chaînes</title>
      <link>https://cordier-info.github.io/tp_python/tp2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/tp_python/tp2/</guid>
      <description>TP2 : Cours 1 et 2 Lien vers le repository GitHub du TP : https://classroom.github.com/a/Prcpdubn
Exercice 1 Expliquer le résultat surprenant du code suivant dans exo_1.md :
d = 8 e = 2 from math import * sqrt(d ** e) 16.88210319127114
 Exercice 2 Combien de fois une feuille de papier d&amp;rsquo;épaisseur $e = 0,1$ mm doit-elle être pliée pour atteindre la Lune ?
Écrire dans exo_2.py un script Python qui calcule et imprime la réponse sans utiliser de boucle.</description>
    </item>
    
    <item>
      <title>Chaînes de caractères</title>
      <link>https://cordier-info.github.io/cours_python/cours2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours2/</guid>
      <description>Les chaînes de caractères Définir une chaîne de caractères Une chaîne de caractères (type str pour l&amp;rsquo;anglais string) est une suite ordonnée de caractères.
Pour définir une variable de ce type, il suffit d&amp;rsquo;encadrer des caractères par &#39; ou &amp;quot; :
salutation = &amp;#34;Bonjour, monsieur &amp;#34; nom = &amp;#39;Raoul&amp;#39; Des chaînes de caractères peuvent être concaténées (= assemblées) en utilisant l&amp;rsquo;opérateur + :
&amp;#34;abc&amp;#34; + &amp;#39;def&amp;#39; &#39;abcdef&#39;
salutation + nom &#39;Bonjour, monsieur Raoul&#39;</description>
    </item>
    
    <item>
      <title>TP3 : Listes, Tuples et boucles</title>
      <link>https://cordier-info.github.io/tp_python/tp3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/tp_python/tp3/</guid>
      <description>TP3 : Listes, tuples et boucles Lien vers le repository GitHub du TP : https://classroom.github.com/a/8UyWSW6k
Exercice 1 Reproduire ces jolies règles de multiplication que l&amp;rsquo;on trouve dans le Talkhys, un traité d’arithmétique d’Ibn Albanna, mathématicien marocain de la première moitié du XIIIe siècle (code à écrire dans exo_1.py)
 1 × 1 = 1 11 × 11 = 121 111 × 111 = 12321 1111 × 1111 = 1234321 11111 × 11111 = 123454321 111111 × 111111 = 12345654321 1111111 × 1111111 = 1234567654321 11111111 × 11111111 = 123456787654321 111111111 × 111111111 = 12345678987654321   Exercice 2 Une liste peut être utilisée comme une représentation simple d&amp;rsquo;un polynôme, $P(x)$, où les éléments sont les coefficients des puissances de $x$ successives et les indices sont les puissances elles-mêmes.</description>
    </item>
    
    <item>
      <title>Séquences et itérables</title>
      <link>https://cordier-info.github.io/cours_python/cours3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours3/</guid>
      <description>Listes, tuples et boucles Listes Python connaît différents types de données combinées, utilisés pour regrouper plusieurs valeurs. La plus souple est la liste, qui peut être écrite comme une suite, placée entre crochets, de valeurs (éléments) séparées par des virgules. Les éléments d&amp;rsquo;une liste ne sont pas obligatoirement tous du même type, bien qu&amp;rsquo;à l&amp;rsquo;usage ce soit souvent le cas.
liste1 = [1, &amp;#39;deux&amp;#39;, 3.14, 0] liste1 [1, &#39;deux&#39;, 3.14, 0]</description>
    </item>
    
    <item>
      <title>TP4 : Structures de contrôle</title>
      <link>https://cordier-info.github.io/tp_python/tp4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/tp_python/tp4/</guid>
      <description>TP4 : Structures de contrôle Lien vers le repository GitHub du TP : https://classroom.github.com/a/_smX5cgY
Exercice 0 Compléter le programme exo_0.py pour qu&amp;rsquo;il ne cesse de demander le nom de l&amp;rsquo;utilisateur tant que sa réponse ne fait pas partie de la liste de noms autorisés. Exercice 1 Le ROT13 (rotate by 13 places) est un cas particulier du chiffre de César, un algorithme simpliste de chiffrement de texte.
Comme son nom l’indique, il s’agit d’un décalage de 13 caractères de chaque lettre du texte à chiffrer.</description>
    </item>
    
    <item>
      <title>Structures de contrôle</title>
      <link>https://cordier-info.github.io/cours_python/cours4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours4/</guid>
      <description>Structures de contrôle Python étant un langage impératif, il possède des structures de contrôle permettant de dévier le flot d&amp;rsquo;exécution. Les structures de contrôle travaillent sur des blocs d&amp;rsquo;instructions contigües qui sont repérés par leur indentation en Python.
Les deux grandes familles de commandes de blocs sont :
 les alternatives : exécuter un bloc d&amp;rsquo;instructions si une certaine condition est réunie (si &amp;hellip; sinon si &amp;hellip; sinon) ; les boucles : exécuter un bloc d&amp;rsquo;instructions à plusieurs reprises (boucle &amp;ldquo;tant que&amp;rdquo; et les boucles avec compteur for déjà rencontrées).</description>
    </item>
    
    <item>
      <title>TP5 : Fonctions et Fichiers</title>
      <link>https://cordier-info.github.io/tp_python/tp5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/tp_python/tp5/</guid>
      <description>TP5 : Fonctions et Fichiers Lien vers le repository GitHub du TP : https://classroom.github.com/a/qRVUwdoz
Exercice 1 Le code suivant essaye de calculer le solde d&amp;rsquo;un compte épargne ayant un taux d&amp;rsquo;intérêt de 5% et un solde initial de 100 € après quatre années.
solde = 100 def ajoute_intérêt(solde,taux) : solde += solde * taux/100 for année in range(4) : ajoute_intérêt(100,5) print(&amp;#39;Solde après l\&amp;#39;année {} : {:.2f} €&amp;#39;.format(année+1,solde)) Solde après l&#39;année 1 : 100.</description>
    </item>
    
    <item>
      <title>Fonctions</title>
      <link>https://cordier-info.github.io/cours_python/cours5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours5/</guid>
      <description>Fonctions Une fonction consiste en un bloc d&amp;rsquo;instructions qui peut être appelé et exécuté à différents endroits et à plusieurs reprises dans le programme.
Deux avantages à l&amp;rsquo;utilisation de fonctions :
 elles permettent de réutiliser du code sans avoir à le réécrire, elles permettent de décomposer un problème complexe en différentes procédures plus simples, chacune prise en charge par sa propre fonction.  Le résultat est plus simple à lire et à débuguer.</description>
    </item>
    
    <item>
      <title>TP6 : Projets</title>
      <link>https://cordier-info.github.io/tp_python/tp6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/tp_python/tp6/</guid>
      <description>TP6 - Projets Lien vers le repository GitHub du TP : https://classroom.github.com/a/v7xsQyLB
Projet 1 : Jeu de Nim Avec l&amp;rsquo;aide de la première partie de cette vidéo ou de toute autre source, découvrir l&amp;rsquo;algorithme de Bouton permettant de gagner au jeu de Nim. Construire ensuite un programme qui :
 propose au joueur de construire le jeu de Nim qu&amp;rsquo;il souhaite (nombre de lignes et nombre de jetons par ligne), choisit de commencer ou non pour s&amp;rsquo;assurer une position gagnante (la machine doit gagner), laisse l&amp;rsquo;humain décider des jetons qu&amp;rsquo;il veut retirer (choix de la ligne, choix du nombre de jetons) lorsque c&amp;rsquo;est son tour puis joue de manière optimale lorsque c&amp;rsquo;est le tour de la machine… Jusqu&amp;rsquo;à gagner, affiche la disposition des jetons à chaque tour.</description>
    </item>
    
    <item>
      <title>Manipulation de fichiers</title>
      <link>https://cordier-info.github.io/cours_python/cours6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cordier-info.github.io/cours_python/cours6/</guid>
      <description>Manipulation de fichiers Interaction avec le système d&amp;rsquo;exploitation Le module os offre la possibilité d&amp;rsquo;interagir avec le système d&amp;rsquo;exploitation indépendamment de la plateforme utilisée.
 os.getcwd() renvoie le répertoire courant (répertoire depuis lequel le programme est exécuté) sous forme de chaîne.  import os os.getcwd() &#39;/Users/cordiermarc/Documents/prof/informatique/Python_6&#39;
 os.chdir(&#39;répertoire&#39;) permet de changer le répertoire courant pour le répertoire donné en argument. On peut soit donner le chemin absolu (qui commence par la racine, / sur un système Unix) soit un chemin relatif (qui commence par .</description>
    </item>
    
  </channel>
</rss>
